Документация API
Добро пожаловать в документацию API нашего проекта! Ниже вы найдете информацию о доступных эндпоинтах и функциональности, которую вы можете использовать.

Аутентификация и авторизация
Вход (логин)
URL
bash

POST /api/login
Описание
Аутентификация пользователя и получение токена доступа.

Параметры запроса
email (строка, обязательный) - Электронная почта пользователя.
password (строка, обязательный) - Пароль пользователя.
Пример запроса
json

{
  "email": "user@example.com",
  "password": "password123"
}
Пример успешного ответа
json

{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
Пример ответа с ошибкой
json
{
  "error": "Invalid credentials"
}
Элементы (Items)
Получить список элементов
URL
bash

GET /api/items
Описание
Получение списка всех элементов.

Заголовки
Authorization (строка, обязательный) - Токен доступа пользователя.
Пример успешного ответа
json

[
  {
    "id": 1,
    "name": "Item 1",
    "description": "Description 1"
  },
  {
    "id": 2,
    "name": "Item 2",
    "description": "Description 2"
  },
  ...
]
Создать новый элемент
URL
bash

POST /api/items
Описание
Создание нового элемента.

Заголовки
Authorization (строка, обязательный) - Токен доступа пользователя.
Параметры запроса
name (строка, обязательный) - Название элемента.
description (строка, обязательный) - Описание элемента.
Пример запроса
json
{
  "name": "New Item",
  "description": "New Item Description"
}
Пример успешного ответа
json

{
  "id": 3,
  "name": "New Item",
  "description": "New Item Description"
}
Обновить элемент
URL
bash

PUT /api/items/{id}
Описание
Обновление информации об элементе с указанным идентификатором.

Заголовки
Authorization (строка, обязательный) - Токен доступа пользователя.
Параметры запроса
name (строка, обязательный) - Новое название элемента.
description (строка, обязательный) - Новое описание элемента.
Пример запроса
json

{
  "name": "Updated Item",
  "description": "Updated Item Description"
}
Пример успешного ответа
json

{
  "id": 3,
  "name": "Updated Item",
  "description": "Updated Item Description"
}
Удалить элемент
URL
bash

DELETE /api/items/{id}
Описание
Удаление элемента с указанным идентификатором.

Заголовки
Authorization (строка, обязательный) - Токен доступа пользователя.
Пример успешного ответа
css

HTTP/1.1 204 No Content
Дополнительные возможности
Получить данные о погоде
URL
bash
GET /api/weather
Описание
Получение данных о погоде.

Заголовки
Authorization (строка, обязательный) - Токен доступа пользователя.
Пример успешного ответа
json
{
  "temperature": 25,
  "description": "Sunny"
}
Получить курсы валют
URL
bash
GET /api/currency-rates
Описание
Получение текущих курсов валют.

Заголовки
Authorization (строка, обязательный) - Токен доступа пользователя.
Пример успешного ответа
json
{
  "USD": 1.23,
  "EUR": 1.10,
  ...
}
Очереди (Queues)
Добавить элемент в очередь обработки
URL
bash
POST /api/items
Описание
Создание нового элемента и добавление его в очередь для обработки.

Заголовки
Authorization (строка, обязательный) - Токен доступа пользователя
Middleware (Промежуточное ПО)
Логирование запросов
Описание
Метод LogRequests применяет промежуточное ПО для логирования входящих запросов.

Применение
Промежуточное ПО LogRequests будет автоматически применяться к каждому входящему запросу и записывать информацию о нем в журнал.

Очереди (Queues)
Обработка элементов
Описание
Класс ProcessItem представляет задачу для обработки элемента в фоновом режиме. Он добавляет элемент в очередь и будет обработан воркером очереди.

Запуск задачи
Для запуска задачи добавления элемента в очередь и его обработки вам необходимо выполнить следующие шаги:

Убедитесь, что воркер очереди запущен и работает. Это можно сделать с помощью команды php artisan queue:work.

В вашем контроллере, например ItemController, вызовите метод dispatch() для класса ProcessItem, чтобы добавить элемент в очередь.

php

ProcessItem::dispatch($item)->onQueue('process_items');
Воркер очереди будет автоматически обрабатывать задачи, добавленные в очередь, в фоновом режиме.
Обратите внимание, что вы можете настроить дополнительные параметры воркера очереди, такие как количество одновременно обрабатываемых задач или время ожидания между задачами. Эти параметры можно указать при запуске команды php artisan queue:work.
Кэширование (Caching)
Кэширование результатов запроса к базе данных
Описание
Метод index() возвращает список всех элементов. Он использует кэширование, чтобы избежать избыточных запросов к базе данных при повторных запросах.

Применение
При вызове метода index() контроллера ItemController будет использоваться кэширование для хранения результата запроса к базе данных.

Кэширование результатов запроса к внешнему API
Описание
Метод getWeather() получает данные о погоде из внешнего API. Он использует кэширование, чтобы избежать повторных запросов к API в течение заданного периода времени.

Применение
При вызове метода getWeather() контроллера ItemController будет использоваться кэширование для хранения результатов запроса к внешнему API.

Работа с внешним API
Получить курсы валют
Описание
Метод getCurrencyRates() получает текущие курсы валют из внешнего API.

Применение
При вызове метода getCurrencyRates() контроллера ItemController будет выполнен запрос к внешнему API для получения текущих курсов валют.

Обратите внимание, что для работы с внешними API вы должны убедиться, что у вас есть необходимые параметры аутентификации, такие как ключи API или токены доступа, и что вы правильно настроили URL-адреса и параметры запроса, соответствующие конкретному API, с которым вы работаете.

Это описание функциональности и использования API, основанное на предоставленном коде. Вы можете добавить больше деталей и расширить документацию в соответствии с требованиями вашего проекта и конкретными внешними API, с которыми вы работаете.
